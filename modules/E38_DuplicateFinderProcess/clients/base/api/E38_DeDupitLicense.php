<?php

/**
 * @author 38 Elements DOO
 *
 * 38 Elements DOO ("COMPANY") CONFIDENTIAL
 *
 * Copyright (c) 2020 38 Elements DOO, Belgrade, Serbia - All Rights Reserved
 *
 * NOTICE:  All information contained herein is, and remains the property
 * of COMPANY. The intellectual and technical concepts contained herein are
 * proprietary to COMPANY and may be covered by Serbia and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material is strictly
 * forbidden unless prior written permission is obtained from COMPANY.
 * Access to the source code contained herein is hereby forbidden to anyone except
 * current COMPANY employees, managers or contractors who have executed
 * Confidentiality and Non-disclosure agreements explicitly covering such access.
 *
 * The copyright notice above does not evidence any actual or intended publication
 * or disclosure  of  this source code, which includes information that is
 * confidential and/or proprietary, and is a trade secret, of  COMPANY.
 * ANY REPRODUCTION, MODIFICATION, DISTRIBUTION, PUBLIC  PERFORMANCE,OR PUBLIC
 * DISPLAY OF OR THROUGH USE  OF THIS  SOURCE CODE  WITHOUT  THE EXPRESS WRITTEN
 * CONSENT OF COMPANY IS STRICTLY PROHIBITED, AND IN VIOLATION OF APPLICABLE LAWS
 * AND INTERNATIONAL TREATIES. THE RECEIPT OR POSSESSION OF  THIS SOURCE CODE
 * AND/OR RELATED INFORMATION DOES NOT CONVEY OR IMPLY ANY RIGHTS TO REPRODUCE,
 * DISCLOSE OR DISTRIBUTE ITS CONTENTS, OR TO MANUFACTURE, USE, OR SELL ANYTHING
 * THAT IT  MAY DESCRIBE, IN WHOLE OR IN PART.
 *
 * Please contact 38 Elements DOO for further details at office@38elements.com
 */
 
  class E38_DeDupitLicense extends SugarApi { const module = "\x45\63\x38\137\104\x65\104\x75\x70\x69\164"; const module_name = "\123\165\x67\x61\x72\x20\x44\x65\104\x75\x70\x69\x74"; const per_user = false; const so_public_key = "\60\67\x66\x35\143\146\x37\67\x64\65\x32\x37\60\146\x32\x66\x61\143\62\x30\146\143\71\66\x64\67\64\x36\145\63\x35\142"; const sources = ["\x53\165\147\141\162\x4f\165\164\146\x69\164\x74\145\x72\163", "\x46\x61\x73\164\123\160\162\151\156\147"]; const MLS_URL = "\x68\164\x74\160\x73\72\57\x2f\x6d\x6c\163\56\x33\x38\x65\x6c\145\155\x65\x6e\164\163\x2e\x63\x6f\155\57"; const SO_URL = "\x68\x74\x74\160\163\72\x2f\57\x77\x77\167\x2e\x73\x75\147\141\x72\157\x75\x74\146\151\x74\x74\145\162\x73\56\143\157\155\x2f\141\x70\x69\57\166\61\57"; public function registerApiRest() { return ["\x67\x65\164\x4c\151\x63\x65\x6e\163\x65\x44\141\x74\141" => ["\162\145\x71\124\x79\x70\x65" => "\x47\x45\124", "\x70\141\164\x68" => [self::module, "\x67\x65\x74\55\x6c\x69\143\x65\x6e\163\145\x2d\144\x61\x74\141"], "\x70\x61\x74\150\x56\141\162\163" => ["\155\157\x64\165\154\145", "\x61\x63\x74\151\157\x6e"], "\x6d\x65\x74\150\x6f\144" => "\147\x65\164\x4c\x69\143\x65\x6e\163\145\x44\x61\164\x61"], "\x76\x61\x6c\151\x64\141\x74\145\114\151\x63\x65\156\163\145" => ["\x72\x65\x71\x54\171\160\145" => "\120\x4f\x53\x54", "\160\x61\164\150" => [self::module, "\166\x61\x6c\x69\144\x61\164\x65\55\154\x69\143\x65\x6e\x73\x65"], "\160\141\x74\x68\x56\x61\x72\x73" => ["\x6d\157\x64\x75\154\145", "\x61\x63\164\151\157\156"], "\x6d\145\x74\x68\x6f\144" => "\166\141\x6c\x69\144\x61\164\x65\x4c\x69\143\145\156\x73\145"], "\x73\141\166\x65\x43\157\156\x66\x69\x67\x75\x72\x61\164\151\157\156" => ["\162\x65\161\124\x79\x70\x65" => "\120\x4f\x53\124", "\x70\x61\164\150" => [self::module, "\163\141\166\x65\55\x63\x6f\x6e\x66\x69\147\x75\x72\141\x74\x69\x6f\x6e"], "\160\141\164\x68\126\141\162\x73" => ["\155\x6f\144\165\x6c\x65", "\141\143\164\151\157\x6e"], "\x6d\x65\x74\x68\x6f\x64" => "\163\x61\x76\145\x43\x6f\x6e\x66\x69\x67\165\162\x61\164\x69\x6f\156"], "\143\x68\x65\x63\x6b\115\114\x53\114\x69\x63\x65\156\163\x65" => ["\x72\145\161\x54\x79\x70\145" => "\107\105\x54", "\160\x61\x74\150" => [self::module, "\143\150\145\x63\153\x2d\154\151\x63\x65\156\163\x65"], "\160\x61\x74\150\x56\x61\162\163" => ["\155\157\x64\x75\x6c\x65", "\141\143\164\151\157\x6e"], "\x6d\x65\x74\150\x6f\144" => "\143\x68\145\143\x6b\115\x4c\123\114\x69\x63\145\156\x73\x65"]]; } public function getLicenseData($api, $args) { global $current_user; if ($current_user->isAdmin()) { goto XWufI; } return ["\163\165\143\143\145\163\163" => false, "\x6d\145\x73\x73\141\147\145" => "\117\x6e\154\171\40\x75\x73\145\162\x20\167\151\x74\x68\40\141\x64\155\x69\156\151\163\x74\x72\x61\164\x69\157\156\x20\x70\162\151\166\151\154\x65\147\x65\163\x20\151\163\x20\x61\154\154\x6f\x77\145\x64\40\x74\x6f\40\x61\x63\143\145\163\x73\x20\x74\x68\151\163\40\x65\x6e\x64\160\x6f\151\156\x74\56"]; XWufI: $license_config = self::getLicenseConfiguration(); $license = $license_config["\x6c\151\x63\145\156\163\145"]; if ($license) { goto q7GSX; } return ["\x73\165\x63\143\145\x73\x73" => false]; goto YN_5W; q7GSX: $users_sent = $this->sendUsersToMLS($license); if ($users_sent["\163\165\x63\x63\145\x73\x73"]) { goto dFLKq; } $mls_response = $this->validateAndSaveMLSLicense($license); if ($mls_response["\163\x75\143\143\145\163\x73"]) { goto c4h52; } return ["\x73\x75\x63\x63\x65\x73\x73" => false, "\x6d\145\x73\x73\x61\x67\145" => $mls_response["\x6d\145\x73\163\141\147\145"]]; c4h52: return ["\x73\x75\x63\143\145\x73\163" => false, "\x6d\145\163\163\141\x67\145" => "\x4d\x4c\123\x20\x64\151\144\x6e\x27\x74\40\x73\145\164\40\165\x73\x65\162\163\56\x20\120\x6c\145\141\163\145\x20\162\x65\x66\x72\x65\x73\150\x20\x74\150\x65\40\160\x61\147\x65\x20\x61\156\144\x20\164\162\x79\x20\x61\147\141\x69\x6e\x2e"]; dFLKq: $mls_response = $this->validateAndSaveMLSLicense($license); if ($mls_response["\x73\x75\143\143\x65\x73\x73"]) { goto o_AcP; } return ["\163\x75\x63\143\x65\x73\163" => false, "\x6d\x65\163\163\x61\147\145" => $mls_response["\155\x65\x73\x73\141\147\x65"]]; o_AcP: return $this->respondToUI($license, $mls_response["\144\141\x74\141"]["\141\166\x61\151\x6c\141\142\154\145\x5f\x6c\x69\x63\x65\x6e\x73\145\163"], $mls_response["\144\141\x74\141"]["\165\x73\145\162\x73"]); YN_5W: } public function validateLicense($api, $args) { global $current_user; if ($current_user->isAdmin()) { goto SCEHe; } return ["\x73\x75\x63\143\x65\163\163" => false, "\x6d\145\163\x73\141\147\x65" => "\x4f\156\x6c\171\x20\x75\163\145\x72\40\167\151\164\150\40\141\x64\155\151\x6e\x69\x73\164\162\x61\164\x69\x6f\x6e\x20\160\x72\x69\166\151\x6c\x65\147\x65\x73\40\x69\163\40\x61\154\154\x6f\167\x65\x64\x20\164\157\40\x61\x63\x63\x65\x73\x73\40\x74\x68\x69\x73\x20\145\x6e\144\x70\157\151\156\x74\x2e"]; SCEHe: $license_key = $args["\x6c\151\143\x65\156\163\x65"]; if (!empty($license_key)) { goto e8P0P; } $this->saveLicenseConfiguration(''); return ["\163\165\143\143\x65\x73\163" => false, "\x6d\145\163\163\141\x67\x65" => "\x4c\151\x63\x65\156\163\x65\x20\x72\x65\x6d\157\166\145\x64\x2e"]; e8P0P: $mls_response = $this->validateAndSaveMLSLicense($license_key); if ($mls_response["\x73\165\x63\143\x65\x73\163"]) { goto GKa9w; } return $mls_response; goto d8Jew; GKa9w: $sending_users_response = $this->sendUsersToMLS($license_key); if ($sending_users_response["\x73\x75\x63\143\145\x73\x73"]) { goto lCwpw; } return ["\163\165\143\143\x65\x73\163" => false, "\x6d\x65\x73\163\141\x67\x65" => $sending_users_response["\x6d\x65\163\x73\141\x67\x65"]]; lCwpw: $users_list = $mls_response["\144\x61\164\x61"]["\165\x73\145\162\163"] ? $mls_response["\x64\141\x74\141"]["\165\163\145\162\163"] : $sending_users_response["\x75\x73\x65\x72\163"]; return $this->respondToUI($license_key, $mls_response["\144\x61\164\x61"]["\x61\x76\x61\151\154\141\142\x6c\145\x5f\x6c\x69\143\145\156\x73\x65\x73"], $users_list); d8Jew: } public function respondToUI($license_key, $available_licenses, $users_list) { return ["\163\x75\x63\143\x65\163\163" => true, "\x6c\151\143\145\x6e\x73\145" => $license_key, "\160\x65\162\x5f\165\163\145\162" => self::per_user, "\154\151\x63\145\x6e\163\145\163\137\x63\157\165\x6e\164" => $available_licenses, "\165\163\x65\162\163" => $users_list]; } public static function validateAndSaveMLSLicense($license_key) { $post_data = ["\154\151\x63\x65\156\x73\x65" => $license_key, "\160\x72\x6f\x64\165\x63\x74\137\x6e\x61\155\145" => self::module_name]; $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, self::MLS_URL . "\x61\x70\x69\57\x63\150\x65\143\153\x2d\x6c\x69\143\145\156\x73\x65\55\141\x63\164\x69\166\x65"); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($post_data)); curl_setopt($ch, CURLOPT_IPRESOLVE, CURL_IPRESOLVE_V4); curl_setopt($ch, CURLOPT_POST, 1); curl_setopt($ch, CURLOPT_HTTPHEADER, ["\103\157\156\x74\145\156\164\x2d\x54\x79\x70\x65\x3a\40\x61\x70\x70\x6c\x69\143\141\164\x69\157\156\x2f\x6a\x73\x6f\156"]); curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0); curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0); $result = curl_exec($ch); $response_info = curl_getinfo($ch); $mls_response = json_decode($result, true); curl_close($ch); $source = $mls_response["\x73\x6f\165\162\143\x65"] ? $mls_response["\163\x6f\165\162\x63\x65"] : "\123\x75\147\x61\162\117\x75\164\x66\x69\x74\x74\x65\162\x73"; if (!($source == "\123\165\147\141\162\117\165\x74\x66\x69\164\164\x65\x72\x73")) { goto MchwO; } $so_response = self::validateSOLicense($license_key); if ($so_response["\163\x75\143\143\145\163\163"]) { goto f6wy7; } return ["\x73\x75\x63\x63\145\x73\x73" => false, "\x6d\145\x73\x73\141\x67\x65" => "\x53\165\x67\141\162\x4f\x75\x74\x66\x69\x74\164\145\162\x73\x3a\40" . $so_response["\155\145\x73\x73\141\147\145"]]; f6wy7: MchwO: if (!($response_info["\150\164\164\160\137\x63\x6f\144\145"] !== 200 && $source != "\123\165\147\x61\162\x4f\x75\164\146\151\x74\164\145\162\x73")) { goto Rw0Kb; } return ["\163\x75\x63\143\145\x73\x73" => false, "\155\145\163\x73\x61\147\145" => $mls_response["\155\145\x73\163\141\147\x65"]]; Rw0Kb: self::saveLicenseConfiguration($license_key, $mls_response); return ["\x73\x75\x63\143\145\163\163" => true, "\144\141\164\x61" => $mls_response]; } public function sendUsersToMLS($license) { try { $q = new SugarQuery(); $q->from(BeanFactory::newBean("\125\163\145\x72\x73"), ["\x74\x65\141\155\137\163\145\x63\x75\x72\x69\164\x79" => false]); $q->join("\145\155\x61\151\x6c\137\141\x64\x64\x72\145\x73\x73\145\163\137\x70\x72\x69\155\x61\x72\171", ["\141\154\151\141\x73" => "\145\x6d\x61\x69\154"]); $q->select(["\x69\x64", "\x66\151\x72\x73\x74\137\156\x61\155\x65", "\154\141\x73\164\x5f\156\141\x6d\x65", "\x75\x73\x65\x72\137\x6e\x61\155\x65", "\x65\x6d\141\151\x6c\56\145\155\x61\x69\x6c\x5f\x61\x64\x64\162\x65\x73\163"]); $q->where()->equals("\x64\145\x6c\145\164\x65\144", "\60"); $all_users = $q->execute(); $post_data = ["\154\151\x63\145\156\x73\x65" => $license, "\165\x73\x65\x72\x73" => []]; $users_list = []; foreach ($all_users as $user_data) { $post_data["\165\163\x65\x72\163"][] = ["\x69\144" => $user_data["\x69\144"], "\x66\x69\162\x73\x74\x5f\156\x61\x6d\145" => $user_data["\x66\151\x72\x73\x74\137\x6e\x61\x6d\x65"], "\154\141\163\164\x5f\x6e\x61\x6d\145" => $user_data["\154\x61\x73\x74\137\x6e\x61\x6d\145"], "\x75\163\145\162\156\141\155\145" => $user_data["\x75\x73\x65\162\137\156\x61\x6d\145"], "\145\x6d\141\x69\154" => $user_data["\x65\155\141\151\x6c\x5f\141\144\x64\x72\145\x73\x73"]]; $users_list[] = ["\x73\x6f\x75\162\143\145\x5f\151\x64" => $user_data["\151\144"], "\146\151\x72\163\x74\137\x6e\x61\x6d\145" => $user_data["\146\151\x72\x73\x74\137\156\x61\x6d\x65"], "\154\141\163\164\137\x6e\141\x6d\x65" => $user_data["\x6c\141\x73\164\x5f\x6e\141\155\x65"], "\x75\163\x65\162\x6e\x61\x6d\145" => $user_data["\x75\163\145\162\x5f\156\141\x6d\145"], "\x65\x6d\x61\x69\154" => $user_data["\x65\155\141\x69\x6c\x5f\141\x64\144\x72\145\x73\163"], "\141\x63\x74\x69\166\x65" => 0]; dMaID: } dGWiD: $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, self::MLS_URL . "\x61\x70\151\57\x73\x65\x74\x2d\163\171\x73\164\x65\x6d\55\144\x61\164\141"); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($post_data)); curl_setopt($ch, CURLOPT_IPRESOLVE, CURL_IPRESOLVE_V4); curl_setopt($ch, CURLOPT_POST, 1); curl_setopt($ch, CURLOPT_HTTPHEADER, ["\x43\157\156\164\x65\x6e\x74\x2d\x54\x79\160\x65\x3a\x20\x61\160\x70\154\151\x63\141\x74\x69\x6f\x6e\x2f\x6a\x73\157\x6e"]); curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0); curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0); $result = curl_exec($ch); $result = json_decode($result, true); $response_info = curl_getinfo($ch); curl_close($ch); return ["\x73\x75\x63\143\145\x73\x73" => $response_info["\x68\x74\164\160\x5f\143\x6f\x64\145"] == 200, "\x75\163\145\x72\163" => $users_list]; } catch (Exception $e) { return ["\163\x75\x63\x63\145\x73\163" => false, "\155\145\163\x73\141\x67\x65" => "\x55\163\145\x72\163\40\x77\145\162\x65\x20\156\x6f\164\x20\163\145\156\x74\40\164\157\40\x4d\x4c\x53\x20\x66\x72\157\155\40\x73\x75\x67\141\x72\56"]; } } public function updateUsersAtMLS($license, $users) { $post_data = ["\154\151\143\x65\x6e\163\x65" => $license, "\165\163\145\x72\x73" => []]; foreach ($users as $user_data) { $post_data["\165\x73\x65\162\x73"][] = ["\x69\144" => $user_data["\x73\157\165\x72\143\145\x5f\151\x64"], "\x66\x69\x72\x73\164\x5f\x6e\x61\x6d\x65" => $user_data["\x66\151\162\x73\164\137\x6e\x61\x6d\145"], "\x6c\141\x73\164\137\156\141\x6d\x65" => $user_data["\x6c\141\163\164\137\156\x61\155\x65"], "\165\x73\145\162\x6e\141\155\x65" => $user_data["\165\163\145\x72\156\141\x6d\x65"], "\x65\x6d\141\151\x6c" => $user_data["\x65\155\141\151\x6c"], "\x61\143\164\x69\166\145" => $user_data["\x61\143\x74\151\x76\x65"]]; gUShC: } ZlSq6: $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, self::MLS_URL . "\x61\160\x69\x2f\x73\145\164\55\163\x79\163\x74\145\155\x2d\144\x61\164\141"); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($post_data)); curl_setopt($ch, CURLOPT_IPRESOLVE, CURL_IPRESOLVE_V4); curl_setopt($ch, CURLOPT_POST, 1); curl_setopt($ch, CURLOPT_HTTPHEADER, ["\x43\x6f\156\x74\x65\156\164\55\124\171\160\145\72\x20\141\160\x70\154\x69\x63\141\164\x69\x6f\x6e\x2f\x6a\163\x6f\x6e"]); curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0); curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0); $result = curl_exec($ch); $result = json_decode($result, true); $response_info = curl_getinfo($ch); curl_close($ch); if ($response_info["\150\x74\x74\x70\x5f\x63\157\144\x65"] == 200) { goto FLSj3; } return ["\163\165\x63\x63\145\163\x73" => false, "\155\145\163\163\x61\x67\145" => "\125\160\x64\141\x74\151\x6e\147\x20\x75\163\145\162\163\x20\x61\164\40\115\114\x53\40\146\x61\x69\x6c\x65\x64\x2e\x20\120\154\x65\x61\163\x65\40\x72\145\x66\x72\145\163\x68\x20\164\x68\145\40\x70\141\x67\145\x20\141\156\144\x20\164\x72\x79\40\x61\147\x61\x69\x6e\56"]; goto a4f2k; FLSj3: return ["\x73\x75\143\143\x65\163\163" => true]; a4f2k: } public function checkMLSLicense($api, $args) { return self::checkLicense(); } public static function checkLicense() { $success_message = ["\163\165\x63\x63\145\163\x73" => true, "\155\x65\x73\x73\x61\147\x65" => "\x4c\151\143\x65\156\163\x65\x20\x69\x73\40\166\141\x6c\151\x64"]; $error_message = ["\x73\x75\143\x63\145\163\163" => false, "\155\x65\163\x73\141\x67\145" => "\114\151\143\145\x6e\x73\x65\40\151\x73\x20\151\x6e\x76\141\154\x69\x64\x2c\40\143\157\x6e\164\141\143\164\40\123\165\x67\x61\162\x20\101\x64\x6d\x69\x6e\x69\163\164\162\141\164\157\162\x2e\x20\x50\154\x65\141\x73\x65\x20\x6d\141\x6b\145\x20\163\165\162\x65\40\164\150\x61\164\x20\x6c\x69\x63\x65\x6e\163\145\x20\x63\x6f\156\146\151\x67\165\162\x61\164\x69\157\x6e\40\151\x73\40\x63\157\x72\162\145\x63\164\x2e"]; try { if (!self::checkUserLicenseInternally()) { goto pbLD1; } return $success_message; pbLD1: $license_config = self::getLicenseConfiguration(); $license = $license_config["\x6c\151\143\x65\x6e\x73\145"]; if ($license) { goto uKmrf; } return $error_message; uKmrf: self::validateAndSaveMLSLicense($license_config["\154\151\143\x65\x6e\163\x65"]); if (!self::checkUserLicenseInternally()) { goto o0f05; } return $success_message; o0f05: return $error_message; } catch (Exception $exception) { return ["\x73\165\x63\143\145\163\x73" => false, "\x6d\145\163\163\141\147\145" => "\105\170\x63\145\160\x74\x69\x6f\x6e\40\157\143\x63\x75\162\x72\145\x64\56\x20\x50\x6c\x65\141\163\x65\x20\x72\x65\146\162\x65\163\x68\40\x74\150\x65\x20\x70\141\147\145\40\141\156\144\40\164\x72\x79\40\141\x67\141\x69\156\56"]; } } public static function checkUserLicenseInternally() { global $current_user, $timedate; $license_config = self::getLicenseConfiguration(); if (!empty($license_config["\154\151\143\145\x6e\163\145"])) { goto PMR2D; } return false; PMR2D: if (self::per_user) { goto Wjcsf; } if (!(strtotime($timedate->getNow()) < $license_config["\166\141\154\151\x64\137\165\x6e\164\151\154"])) { goto Cs1Oq; } return true; Cs1Oq: goto S9BxF; Wjcsf: if (isset($license_config["\154\151\x63\x65\x6e\163\145\x64\x5f\x75\x73\145\x72\163"]["\154\x69\x73\x74"])) { goto hz_JI; } return false; hz_JI: if (in_array($current_user->id, $license_config["\x6c\151\x63\145\x6e\x73\x65\144\137\x75\x73\145\162\163"]["\x6c\151\163\164"])) { goto dyKWY; } return false; dyKWY: if (!(strtotime($timedate->getNow()) < $license_config["\166\141\x6c\x69\x64\137\x75\x6e\164\151\x6c"])) { goto wVu43; } return true; wVu43: S9BxF: return false; } public static function saveLicenseConfiguration($license, $mls_response = '') { global $timedate; require_once "\x6d\157\x64\x75\154\145\x73\57\x41\x64\x6d\x69\156\x69\x73\x74\x72\x61\164\x69\x6f\x6e\x2f\101\x64\155\x69\156\x69\163\x74\x72\141\x74\151\157\x6e\x2e\x70\x68\160"; $license_configuration = array("\x6c\151\143\145\156\x73\145" => $license, "\163\x6f\165\x72\143\x65" => '', "\x76\x61\154\151\x64\x5f\165\x6e\x74\x69\x6c" => '', "\154\x69\x63\145\x6e\x73\145\x64\x5f\x75\163\x65\162\163" => []); if (!($mls_response && $mls_response["\163\157\x75\162\x63\x65"])) { goto iI6i_; } $license_configuration["\x73\x6f\x75\x72\143\x65"] = $mls_response["\163\x6f\x75\x72\x63\x65"]; iI6i_: if (!$license) { goto qAH_Y; } $in_3_days = $timedate->getNow()->add(new DateInterval("\x50\x33\104"))->asDb(); $in_3_days = strtotime($in_3_days); $license_configuration["\x76\141\x6c\x69\144\x5f\x75\x6e\164\x69\154"] = $in_3_days; if (!(self::per_user && $mls_response["\x75\163\x65\162\x73"])) { goto bN27A; } $license_configuration["\154\x69\x63\x65\156\x73\145\x64\137\165\163\145\x72\163"] = ["\x61\x76\141\151\x6c\x61\x62\x6c\x65\137\x6c\x69\143\x65\156\x73\x65\x73" => $mls_response["\x61\166\x61\x69\x6c\x61\142\x6c\145\x5f\154\x69\x63\x65\156\x73\x65\x73"], "\154\x69\x73\164" => []]; foreach ($mls_response["\x75\x73\x65\162\x73"] as $licensed_user_data) { if (!(!isset($licensed_user_data["\141\x63\164\x69\166\x65"]) || !$licensed_user_data["\141\x63\x74\x69\x76\145"])) { goto eN5Yv; } goto lyDOC; eN5Yv: array_push($license_configuration["\x6c\151\143\145\x6e\163\145\144\x5f\165\163\x65\x72\163"]["\154\x69\163\x74"], $licensed_user_data["\x73\x6f\165\162\143\x65\x5f\x69\144"]); lyDOC: } AumI1: bN27A: qAH_Y: $administration = new Administration(); $administration->saveSetting(self::module, "\x6c\x69\143\145\156\x73\145", json_encode($license_configuration)); } public function saveConfiguration($api, $args) { if (isset($args["\165\163\145\162\x73"])) { goto xaZwU; } return ["\163\165\x63\143\x65\x73\163" => false, "\155\x65\163\163\x61\x67\x65" => "\124\x68\145\162\145\x20\x61\162\x65\40\x6e\x6f\40\165\x73\x65\x72\163\x20\160\x61\x73\x73\145\144\56\40\120\154\x65\141\163\145\40\x72\145\146\x72\x65\x73\x68\40\x74\150\x65\x20\x70\x61\147\145\40\141\x6e\144\x20\x74\x72\171\x20\141\x67\141\151\156\56"]; xaZwU: if (isset($args["\154\151\x63\x65\156\x73\x65\163\137\x63\x6f\165\156\164"])) { goto xyydD; } return ["\x73\x75\x63\143\145\163\163" => false, "\x6d\x65\163\163\x61\147\145" => "\124\150\145\162\x65\40\141\x72\145\40\x6e\157\40\154\x69\x63\145\x6e\x73\x65\163\x20\x63\x6f\165\x6e\x74\x20\x70\141\163\163\145\144\x2e\x20\x50\x6c\x65\x61\x73\145\40\x72\145\146\x72\145\x73\150\40\164\150\x65\x20\160\x61\x67\145\40\x61\x6e\144\x20\x74\x72\x79\x20\141\147\141\151\156\x2e"]; xyydD: $licenses_count = $args["\x6c\x69\x63\x65\156\163\145\x73\x5f\x63\157\x75\156\164"]; $license_config = self::getLicenseConfiguration(); if (!(!$license_config || !isset($license_config["\154\x69\143\x65\156\x73\145"]))) { goto H3cuB; } return ["\163\x75\143\143\x65\x73\x73" => false, "\x6d\145\x73\163\x61\x67\145" => "\x4c\151\143\145\x6e\163\145\x20\x63\x61\x6e\x20\x6e\x6f\x74\40\142\145\40\146\x6f\165\x6e\x64\56\40\x50\154\x65\141\x73\145\x20\162\145\146\x72\x65\163\150\x20\164\x68\145\40\160\141\x67\145\40\141\x6e\x64\x20\164\162\x79\x20\x61\147\141\x69\x6e\x2e"]; H3cuB: if (!($license_config["\x6c\151\143\145\156\x73\145\144\137\x75\x73\x65\162\x73"]["\141\166\x61\x69\154\141\x62\154\x65\137\154\x69\143\145\x6e\163\145\x73"] != $licenses_count)) { goto I5_IA; } if ($license_config["\163\x6f\x75\162\x63\145"] == "\x53\165\147\141\162\117\x75\164\146\x69\164\x74\145\162\x73") { goto PQCw2; } if ($license_config["\x73\157\x75\x72\x63\145"] == "\x46\x61\163\164\x53\160\x72\151\156\147") { goto Bv2LM; } goto DT_xQ; PQCw2: $so_response = $this->updateSOUsers($license_config["\x6c\x69\143\x65\x6e\x73\145"], $licenses_count); goto DT_xQ; Bv2LM: $fs_response = $this->updateFSUsers($license_config["\x6c\x69\x63\145\x6e\x73\145"], $licenses_count); if ($fs_response["\x73\x75\x63\143\x65\163\x73"]) { goto SpboD; } return ["\x73\165\x63\143\145\x73\x73" => false, "\155\x65\x73\x73\x61\x67\145" => "\123\x61\166\151\x6e\x67\x20\x46\x53\x20\165\x73\145\x72\x20\143\157\165\x6e\164\40\150\141\x73\x20\146\x61\151\x6c\145\x64\56\40\x50\x6c\x65\x61\163\145\x20\x72\145\146\x72\145\163\150\40\164\150\145\40\x70\141\147\145\x20\x61\x6e\144\x20\x74\x72\x79\40\x61\x67\x61\151\x6e\x2e"]; SpboD: DT_xQ: I5_IA: $updating_users_response = $this->updateUsersAtMLS($license_config["\x6c\151\x63\x65\156\x73\x65"], $args["\165\x73\x65\x72\x73"]); if ($updating_users_response) { goto nCMNl; } return ["\163\x75\x63\143\x65\x73\x73" => false, "\155\145\x73\x73\141\147\x65" => "\x53\141\x76\151\x6e\147\40\143\157\x6e\x66\151\147\165\162\x61\x74\151\x6f\156\40\146\141\x69\x6c\145\x64\x2e\x20\120\154\145\141\x73\145\40\162\x65\146\162\145\163\150\x20\x74\150\x65\x20\x70\x61\147\x65\x20\x61\156\x64\x20\164\x72\x79\x20\x61\x67\x61\x69\156\56"]; goto Io3RY; nCMNl: $mls_response = $this->validateAndSaveMLSLicense($license_config["\154\151\x63\x65\156\163\x65"]); return $this->respondToUI($license_config["\x6c\151\x63\145\x6e\x73\x65"], $mls_response["\x64\x61\164\141"]["\x61\x76\141\151\x6c\141\142\x6c\x65\137\x6c\x69\x63\145\x6e\163\x65\x73"], $mls_response["\x64\x61\164\x61"]["\x75\x73\145\x72\x73"]); Io3RY: } public static function validateSOLicense($license_key) { try { $license_validation_url = self::SO_URL . "\x6b\145\171\57\x76\x61\x6c\151\144\141\x74\x65"; $data = ["\x6b\145\171" => $license_key, "\x70\165\x62\154\x69\143\137\x6b\x65\171" => self::so_public_key]; $ch = curl_init(); $license_validation_url .= "\77" . http_build_query($data); curl_setopt($ch, CURLOPT_URL, $license_validation_url); curl_setopt($ch, CURLOPT_FAILONERROR, false); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_HEADER, false); curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0); curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0); $response = curl_exec($ch); $info = curl_getinfo($ch); curl_close($ch); $result = json_decode($response, true); } catch (Exception $exception) { return ["\x73\165\x63\143\145\x73\163" => false, "\x6d\145\163\163\x61\147\145" => "\x76\x61\154\x69\144\x61\164\x65\x53\x4f\x4c\151\143\145\156\163\145\x20\x66\x61\151\x6c\145\144"]; } if (!($info["\x68\x74\x74\160\x5f\143\x6f\x64\x65"] != 200)) { goto knF2F; } return ["\163\165\x63\x63\x65\163\163" => false, "\x6d\145\163\163\141\x67\145" => $result]; knF2F: return ["\163\165\143\143\145\x73\163" => true, "\144\x61\x74\141" => $result]; } public function updateSOUsers($license_key, $user_count) { if ($user_count) { goto X1Yuv; } return ["\x73\x75\143\143\145\x73\x73" => false, "\155\145\x73\x73\x61\x67\145" => "\x4e\157\40\x75\163\x65\162\40\143\157\165\x6e\x74\40\x73\145\x74\x2e"]; X1Yuv: try { $users_count_url = self::SO_URL . "\153\145\x79\x2f\x63\x68\x61\156\147\145"; $data = ["\x6b\145\x79" => $license_key, "\x70\x75\142\154\151\143\137\x6b\145\x79" => self::so_public_key, "\165\163\145\162\x5f\143\x6f\x75\156\164" => $user_count]; $ch = curl_init(); curl_setopt($ch, CURLOPT_POST, 1); curl_setopt($ch, CURLOPT_POSTFIELDS, $data); curl_setopt($ch, CURLOPT_URL, $users_count_url); curl_setopt($ch, CURLOPT_FAILONERROR, false); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_HEADER, false); curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0); curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0); $response = curl_exec($ch); $info = curl_getinfo($ch); curl_close($ch); $result = json_decode($response); } catch (Exception $exception) { return ["\x73\165\x63\x63\145\x73\x73" => false, "\155\145\163\163\x61\147\x65" => "\165\x70\x64\141\x74\145\x53\x4f\125\163\x65\x72\x73\40\146\x61\x69\154\x65\144"]; } if (!($info["\150\x74\x74\160\x5f\x63\157\x64\x65"] != 200)) { goto C32Tf; } return ["\163\x75\x63\143\145\x73\163" => false, "\x6d\145\x73\x73\141\x67\x65" => $result]; C32Tf: return ["\x73\165\143\x63\145\163\x73" => true]; } public function updateFSUsers($license_key, $user_count) { if ($user_count) { goto xvJkh; } return ["\x73\165\143\143\145\x73\x73" => false, "\x6d\x65\163\163\141\147\x65" => "\x4e\157\40\165\x73\145\x72\x20\143\x6f\165\156\164\x20\163\x65\164\56"]; xvJkh: try { $post_data = ["\x6c\151\x63\145\x6e\x73\145" => $license_key, "\x75\x73\145\162\x5f\143\157\165\156\164" => $user_count]; $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, self::MLS_URL . "\141\x70\151\57\165\x70\x64\141\164\x65\x2d\154\x69\x63\145\156\x73\x65"); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($post_data)); curl_setopt($ch, CURLOPT_IPRESOLVE, CURL_IPRESOLVE_V4); curl_setopt($ch, CURLOPT_POST, 1); curl_setopt($ch, CURLOPT_HTTPHEADER, ["\103\x6f\156\164\x65\156\x74\x2d\x54\x79\x70\x65\x3a\40\141\160\160\x6c\151\x63\141\x74\x69\x6f\156\57\152\x73\x6f\156"]); curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0); curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0); $result = curl_exec($ch); $info = curl_getinfo($ch); $mls_response = json_decode($result, true); curl_close($ch); } catch (Exception $exception) { return ["\x73\x75\143\x63\145\163\x73" => false, "\x6d\145\163\163\141\147\x65" => "\165\x70\144\141\164\x65\106\123\x55\163\145\x72\163\x20\146\141\151\x6c\x65\144"]; } if (!($info["\x68\164\x74\160\137\x63\x6f\x64\145"] != 200)) { goto soy7S; } return ["\x73\165\143\143\145\x73\x73" => false, "\x6d\145\x73\x73\141\x67\x65" => $result]; soy7S: return ["\x73\165\143\x63\x65\x73\x73" => true]; } public static function getLicenseConfiguration($only_license = false) { require_once "\155\x6f\x64\165\x6c\145\x73\x2f\x41\144\x6d\151\x6e\151\163\164\162\x61\164\151\x6f\156\x2f\101\144\155\x69\x6e\151\x73\x74\x72\141\164\151\x6f\156\56\x70\x68\160"; $administration = new Administration(); $administration->retrieveSettings('', true); $license_configuration = $administration->settings[self::module . "\137\x6c\151\x63\145\156\x73\x65"]; if (!$only_license) { goto KokbG; } return $license_configuration["\x6c\x69\x63\145\x6e\163\145"]; KokbG: return $license_configuration; } }
