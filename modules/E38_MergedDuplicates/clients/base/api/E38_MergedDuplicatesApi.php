<?php

/**
 * @author 38 Elements DOO
 *
 * 38 Elements DOO ("COMPANY") CONFIDENTIAL
 *
 * Copyright (c) 2020 38 Elements DOO, Belgrade, Serbia - All Rights Reserved
 *
 * NOTICE:  All information contained herein is, and remains the property
 * of COMPANY. The intellectual and technical concepts contained herein are
 * proprietary to COMPANY and may be covered by Serbia and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material is strictly
 * forbidden unless prior written permission is obtained from COMPANY.
 * Access to the source code contained herein is hereby forbidden to anyone except
 * current COMPANY employees, managers or contractors who have executed
 * Confidentiality and Non-disclosure agreements explicitly covering such access.
 *
 * The copyright notice above does not evidence any actual or intended publication
 * or disclosure  of  this source code, which includes information that is
 * confidential and/or proprietary, and is a trade secret, of  COMPANY.
 * ANY REPRODUCTION, MODIFICATION, DISTRIBUTION, PUBLIC  PERFORMANCE,OR PUBLIC
 * DISPLAY OF OR THROUGH USE  OF THIS  SOURCE CODE  WITHOUT  THE EXPRESS WRITTEN
 * CONSENT OF COMPANY IS STRICTLY PROHIBITED, AND IN VIOLATION OF APPLICABLE LAWS
 * AND INTERNATIONAL TREATIES. THE RECEIPT OR POSSESSION OF  THIS SOURCE CODE
 * AND/OR RELATED INFORMATION DOES NOT CONVEY OR IMPLY ANY RIGHTS TO REPRODUCE,
 * DISCLOSE OR DISTRIBUTE ITS CONTENTS, OR TO MANUFACTURE, USE, OR SELL ANYTHING
 * THAT IT  MAY DESCRIBE, IN WHOLE OR IN PART.
 *
 * Please contact 38 Elements DOO for further details at office@38elements.com
 */
 
  class E38_MergedDuplicatesApi extends SugarApi { public function registerApiRest() { return array("\x63\x72\x65\x61\x74\x65\x4d\145\x72\147\x65\x64\x44\165\160\154\151\x63\141\164\145" => array("\162\145\161\x54\171\x70\x65" => "\120\117\x53\124", "\x70\141\164\150" => array("\x45\x33\x38\x5f\115\x65\162\x67\145\x64\x44\x75\160\154\151\x63\141\x74\145\x73", "\143\x72\145\141\x74\145\55\155\145\162\x67\145\x64\55\x64\x75\160\154\x69\x63\x61\x74\x65"), "\x70\141\164\x68\x56\x61\162\x73" => array(), "\155\x65\x74\x68\x6f\144" => "\x63\162\x65\141\164\145\115\x65\x72\x67\145\144\104\x75\x70\154\x69\x63\x61\x74\145"), "\147\145\x74\x53\x74\141\x74\151\x73\164\151\143\x73" => array("\162\145\x71\x54\171\160\145" => "\x47\105\x54", "\160\x61\164\150" => array("\x45\x33\70\x5f\x4d\145\162\147\x65\144\104\x75\160\x6c\x69\x63\141\164\145\163", "\x67\145\164\55\163\x74\141\164\x69\163\164\x69\143\x73"), "\160\141\x74\x68\x56\x61\x72\x73" => array(), "\155\x65\164\x68\157\144" => "\147\x65\x74\x53\x74\141\164\x69\163\164\151\143\x73"), "\x67\145\x74\115\x65\x72\147\x65\x48\151\x73\164\x6f\x72\x79" => array("\x72\145\x71\124\171\x70\145" => "\107\x45\x54", "\x70\x61\x74\x68" => array("\x45\63\70\x5f\115\x65\x72\147\145\144\104\165\x70\x6c\x69\143\141\164\x65\x73", "\x67\x65\164\55\155\145\162\x67\x65\55\150\x69\x73\164\157\162\171", "\x3f", "\77"), "\160\141\164\150\x56\x61\x72\x73" => array("\160\x72\145\146\x69\x78", "\x61\143\164\151\157\156", "\x66\157\x72\x5f\x6d\x6f\x64\165\x6c\145", "\x6f\x72\x69\147\151\x6e\x61\x6c\137\x69\144"), "\155\x65\x74\150\157\x64" => "\x67\x65\x74\115\145\162\x67\145\x48\x69\163\x74\x6f\x72\x79"), "\x70\162\x65\x76\151\145\x77\115\x65\x72\147\x65\x64\x52\145\x63\x6f\x72\144" => array("\x72\x65\x71\124\x79\160\x65" => "\x47\105\x54", "\x70\x61\x74\x68" => array("\105\63\x38\137\x4d\145\162\147\x65\x64\x44\165\160\154\151\x63\141\x74\x65\163", "\x70\x72\x65\x76\151\145\x77\55\155\145\x72\147\x65\144\x2d\x72\145\x63\157\162\144", "\x3f"), "\160\x61\164\150\x56\141\162\x73" => array("\160\x72\x65\146\x69\x78", "\x61\x63\164\x69\x6f\x6e", "\155\x65\162\x67\x65\137\x72\145\x63\x6f\x72\144\x5f\151\144"), "\x6d\145\x74\150\x6f\x64" => "\160\162\x65\x76\x69\x65\x77\115\x65\x72\x67\x65\x64\122\x65\x63\x6f\x72\144")); } public function createMergedDuplicate($api, $args) { require_once "\x6d\x6f\144\165\154\145\163\x2f\x45\63\70\x5f\x44\165\160\154\x69\143\x61\x74\x65\106\x69\156\144\145\162\x50\x72\157\143\145\x73\x73\57\x44\145\x44\165\x70\x69\x74\x57\157\162\x6b\x65\x72\56\x70\x68\x70"; if (!(empty($args["\157\162\x69\147\151\x6e\141\x6c\x5f\x69\x64"]) || empty($args["\x64\x75\x70\154\x69\143\141\x74\x65\137\151\x64"]) || empty($args["\146\157\x72\x5f\x6d\157\x64\x75\x6c\x65"]))) { goto x_Cbm; } return false; x_Cbm: $primary_record_bean = BeanFactory::getBean($args["\x66\x6f\162\137\155\157\144\165\x6c\x65"], $args["\157\162\x69\x67\x69\156\141\x6c\137\151\144"]); if (!empty($primary_record_bean->id)) { goto RKq2b; } return false; RKq2b: $duplicate_bean = BeanFactory::getBean($args["\x66\157\162\x5f\x6d\x6f\144\x75\154\x65"], $args["\x64\x75\x70\154\x69\143\141\x74\x65\x5f\151\144"], array(), false); if (!empty($duplicate_bean->id)) { goto RFH7W; } return false; RFH7W: $duplicate_finder_process_id = $args["\144\x75\160\154\151\x63\x61\x74\145\x5f\146\x69\x6e\x64\145\162\137\160\162\x6f\143\x65\163\x73\x5f\151\144"] ? $args["\144\x75\160\x6c\x69\x63\x61\x74\145\137\x66\x69\x6e\144\145\162\x5f\x70\162\x6f\143\x65\163\163\x5f\151\144"] : ''; DeDupitWorker::createMergedDuplicateRecord($duplicate_bean, $primary_record_bean, $duplicate_finder_process_id); return true; } public function getStatistics($api, $args) { $found_duplicates_query = $GLOBALS["\144\142"]->query("\xa\40\40\40\40\x20\40\x20\x20\x20\x20\x20\x20\123\x45\x4c\x45\103\124\40\145\x33\70\x5f\144\x75\x70\154\151\143\x61\x74\x65\143\150\x65\143\153\x2e\146\157\162\x5f\155\157\144\165\154\x65\54\40\145\x33\70\137\x66\157\165\x6e\144\x64\x75\160\x6c\x69\x63\x61\x74\145\163\x2e\x69\x67\156\x6f\162\x65\137\160\x61\151\x72\x2c\40\x65\x33\x38\137\146\157\x75\156\x64\x64\165\160\x6c\x69\143\141\164\145\163\x2e\x64\141\x74\x65\x5f\x65\156\164\145\162\145\144\xa\x20\x20\40\40\40\40\40\x20\40\40\40\40\106\122\x4f\x4d\x20\x65\63\x38\137\x66\x6f\x75\x6e\x64\x64\165\x70\154\151\143\141\x74\145\163\xa\11\40\x20\x20\40\x20\40\x20\x20\x20\x20\x20\40\x4a\x4f\x49\116\x20\145\x33\70\x5f\x64\x75\x70\x6c\x69\x63\141\164\x65\x63\x68\x65\x63\153\x5f\x65\x33\70\x5f\146\157\x75\x6e\144\144\x75\160\154\151\x63\x61\164\x65\163\40\117\x4e\x20\x65\63\70\137\146\x6f\165\x6e\144\144\165\160\154\151\143\141\164\x65\163\56\x69\x64\x20\x3d\40\145\x33\x38\137\144\165\160\x6c\151\143\141\164\x65\x63\x68\145\x63\153\x5f\x65\63\70\x5f\146\x6f\165\156\x64\x64\165\x70\x6c\151\x63\x61\164\145\163\56\x65\x33\70\137\146\157\x75\156\144\144\165\160\154\151\143\x61\164\x65\x73\137\151\x64\12\x9\x20\40\x20\x20\x20\x20\40\x20\40\40\x20\40\x4a\117\111\x4e\40\145\x33\x38\137\x64\165\160\x6c\x69\143\x61\164\145\143\150\145\x63\x6b\40\x4f\116\40\x65\63\70\x5f\144\x75\x70\x6c\151\143\141\164\145\143\x68\x65\143\153\56\151\x64\40\x3d\40\145\x33\70\x5f\x64\165\160\154\151\143\141\164\145\x63\150\145\143\x6b\137\145\x33\x38\x5f\x66\x6f\x75\x6e\144\144\x75\x70\154\151\x63\x61\164\145\x73\x2e\145\63\x38\x5f\144\165\x70\154\151\x63\x61\164\145\x63\150\145\x63\x6b\x5f\x69\144\xa\11\40\40\x20\40\40\x20\40\x20\x47\x52\x4f\125\120\40\102\131\x20\145\x33\70\137\x64\x75\160\154\151\143\x61\164\x65\x63\150\x65\143\x6b\x2e\146\x6f\162\137\x6d\x6f\144\165\154\x65\x2c\x20\x65\63\x38\137\x66\x6f\x75\156\144\x64\x75\160\154\x69\x63\141\x74\145\163\x2e\x69\x64\12\40\40\40\40\x20\40\x20\40"); $found_duplicates = array(); PaJ2T: if (!($row = $GLOBALS["\x64\x62"]->fetchByAssoc($found_duplicates_query))) { goto hjiJB; } if (!empty($found_duplicates[$row["\x66\x6f\x72\137\155\x6f\x64\165\154\x65"]])) { goto V9_c0; } $found_duplicates[$row["\146\x6f\x72\137\155\x6f\144\165\154\145"]] = array("\x69\x67\x6e\x6f\x72\x65\x64" => 0, "\x66\157\x75\x6e\x64" => 0, "\x6d\145\162\x67\x65\144" => 0, "\x66\x6f\x75\x6e\x64\137\154\141\x73\x74\x5f\x33\60\137\144\141\x79\163" => 0, "\162\141\164\x69\x6f" => 0); V9_c0: if ($row["\x69\x67\156\x6f\162\x65\137\x70\141\x69\162"]) { goto PkNT2; } $found_duplicates[$row["\x66\x6f\x72\x5f\x6d\x6f\x64\x75\154\x65"]]["\146\x6f\165\156\x64"]++; $time_diff = (strtotime("\156\x6f\x77") - strtotime($row["\144\141\164\145\x5f\x65\156\x74\x65\162\145\x64"])) / 60 / 60 / 24; if (!($time_diff < 31)) { goto F6BxV; } $found_duplicates[$row["\x66\x6f\x72\137\155\x6f\144\x75\x6c\x65"]]["\146\x6f\x75\x6e\x64\137\x6c\x61\163\x74\x5f\63\60\x5f\x64\141\x79\163"]++; F6BxV: goto b3abi; PkNT2: $found_duplicates[$row["\146\x6f\x72\137\155\x6f\x64\165\x6c\x65"]]["\151\147\x6e\157\162\x65\144"]++; b3abi: goto PaJ2T; hjiJB: $merged_duplicates_query = $GLOBALS["\144\x62"]->query("\12\x20\40\40\40\40\x20\x20\40\x20\40\40\x20\123\x45\x4c\105\103\124\x20\143\157\x75\x6e\164\50\52\x29\x20\101\x53\x20\155\145\x72\x67\145\144\137\143\157\165\x6e\x74\x2c\40\146\157\x72\137\155\x6f\x64\x75\154\145\xa\40\40\x20\x20\40\x20\40\x20\x20\x20\x20\x20\x46\122\117\x4d\x20\145\x33\70\137\155\145\162\x67\x65\x64\144\165\160\154\151\143\141\164\x65\x73\xa\x20\40\40\x20\40\40\40\40\x20\x20\40\x20\107\x52\117\x55\x50\x20\x42\131\x20\x66\x6f\x72\x5f\155\x6f\144\x75\154\145\x9\x20\x20\x20\40\x20\x20\x20\x20\x20\40\40\x20\12\40\40\40\x20\40\40\x20\x20"); Ck4QF: if (!($row = $GLOBALS["\x64\142"]->fetchByAssoc($merged_duplicates_query))) { goto Wcc_Z; } if (!empty($found_duplicates[$row["\x66\x6f\x72\x5f\155\157\x64\x75\154\145"]])) { goto NrW6p; } $found_duplicates[$row["\146\x6f\162\x5f\x6d\157\144\x75\154\145"]] = array("\x69\x67\x6e\157\162\145\144" => 0, "\x66\x6f\165\x6e\x64" => 0, "\155\x65\162\147\145\x64" => 0, "\146\x6f\165\156\x64\137\154\141\163\x74\137\63\x30\137\x64\141\x79\x73" => 0, "\162\141\164\151\157" => 0); NrW6p: $found_duplicates[$row["\146\x6f\x72\137\x6d\157\144\165\154\145"]]["\x6d\x65\162\147\x65\x64"] = $row["\155\x65\x72\147\145\144\x5f\143\x6f\165\156\x74"]; goto Ck4QF; Wcc_Z: function aasort(&$array, $key) { $sorter = array(); $ret = array(); reset($array); foreach ($array as $ii => $va) { $sorter[$ii] = $va[$key]; KoKFs: } R9CMB: arsort($sorter); foreach ($sorter as $ii => $va) { $ret[$ii] = $array[$ii]; TbfPz: } Lk75T: $array = $ret; } aasort($found_duplicates, "\155\145\x72\x67\145\x64"); foreach ($found_duplicates as $module_name => $found_duplicates_numbers) { $found_duplicates[$module_name]["\155\157\x64\165\154\145\137\x6c\141\x62\145\x6c"] = translate($module_name); $bean = BeanFactory::getBean($module_name); $new_beans_query = $GLOBALS["\x64\x62"]->query("\xa\x20\40\40\40\x20\40\x20\40\40\40\x20\40\x20\x20\40\40\x53\105\x4c\x45\103\x54\40\x63\x6f\165\x6e\164\50\52\51\x20\x41\123\x20\141\x6c\154\x5f\162\145\x63\157\x72\x64\x73\x5f\143\x6f\165\156\164\12\x20\40\40\x20\40\x20\40\40\x20\x20\40\40\40\x20\x20\40\x46\122\117\115\40{$bean->getTableName()}\xa\x20\40\x20\40\40\x20\40\40\x20\x20\x20\40\40\x20\40\x20\x57\x48\105\122\x45\x20\x64\x65\154\145\164\x65\x64\40\x3d\40\x30\12\x20\x20\40\x20\x20\40\x20\x20\x20\40\40\40"); eII_F: if (!($row = $GLOBALS["\x64\142"]->fetchByAssoc($new_beans_query))) { goto XBGFQ; } if (!$found_duplicates[$module_name]["\146\x6f\165\x6e\x64"]) { goto BkWPl; } $ratio = round($found_duplicates[$module_name]["\146\157\165\156\x64"] / $row["\x61\154\x6c\137\162\x65\x63\157\162\144\163\x5f\x63\x6f\x75\x6e\164"] * 100, 1); if (!($ratio > 100)) { goto TJoQi; } $ratio = null; TJoQi: $found_duplicates[$module_name]["\x72\141\164\151\x6f"] = $ratio; goto PbImQ; BkWPl: $found_duplicates[$module_name]["\162\141\x74\x69\x6f"] = 0; PbImQ: goto eII_F; XBGFQ: hhBrI: } SFXIz: return array("\x73\x75\143\x63\x65\x73\163" => true, "\x66\157\165\x6e\x64\137\144\x75\x70\x6c\151\143\x61\164\x65\163" => $found_duplicates); } public function getMergeHistory($api, $args) { global $current_user, $timedate; if (!empty($args["\x66\x6f\x72\137\155\x6f\x64\x75\154\145"])) { goto RYZoa; } return array("\x73\x75\143\x63\145\x73\163" => false, "\x6d\145\163\163\141\x67\145" => translate("\x4c\x42\x4c\x5f\106\117\x52\137\x4d\117\x44\x55\x4c\105\x5f\x4d\x49\123\x53\111\116\x47", "\105\63\x38\x5f\115\x65\x72\147\x65\x64\104\165\160\154\x69\143\x61\164\x65\x73")); RYZoa: if (!empty($args["\157\162\x69\147\151\156\x61\x6c\137\151\x64"])) { goto pPv32; } return array("\163\165\x63\143\x65\163\163" => false, "\155\145\163\x73\141\x67\145" => translate("\114\x42\x4c\x5f\117\122\x49\x47\111\x4e\x41\114\137\111\x44\137\x4d\x49\x53\123\111\x4e\x47", "\105\63\x38\137\x4d\145\162\147\145\x64\104\165\160\x6c\x69\x63\141\x74\145\163")); pPv32: $merged_duplicates_query = $GLOBALS["\144\142"]->query("\12\x20\40\40\40\40\x20\x20\x20\40\x20\x20\x20\x53\x45\x4c\x45\x43\124\x20\x2a\xa\40\40\40\40\40\40\40\x20\40\x20\40\x20\x46\x52\x4f\115\x20\x65\x33\70\137\x6d\x65\162\x67\x65\x64\144\165\160\x6c\151\x63\x61\x74\x65\163\12\x9\40\40\x20\x20\40\x20\40\x20\x57\110\x45\122\105\x20\x70\x72\x69\x6d\x61\162\x79\x5f\x72\145\143\x6f\162\x64\x5f\151\x64\40\75\40\47{$args["\x6f\162\x69\147\x69\x6e\x61\154\137\151\x64"]}\47\xa\x9\40\40\40\x20\x20\40\x20\x20\117\x52\x44\x45\x52\x20\102\x59\40\x64\x61\164\x65\137\x65\x6e\164\145\x72\x65\144\40\101\123\103\12\40\40\40\x20\40\40\x20\40"); $merged_duplicates = array(); qv0IH: if (!($row = $GLOBALS["\x64\x62"]->fetchByAssoc($merged_duplicates_query))) { goto Kf3RV; } if (!$row["\155\x65\x72\147\151\x6e\x67\x5f\160\x72\x6f\143\x65\x73\x73\x5f\x69\x64"]) { goto C1H5Q; } $merging_process_bean = BeanFactory::getBean("\105\x33\x38\x5f\104\165\x70\x6c\151\x63\141\x74\x65\106\151\156\x64\x65\162\120\x72\157\143\145\163\x73", $row["\x6d\145\162\147\x69\156\147\x5f\x70\162\x6f\143\145\163\163\x5f\151\x64"]); $merging_process_name = $merging_process_bean->name ? $merging_process_bean->name : $row["\155\x65\162\147\x69\x6e\147\137\x70\x72\x6f\x63\x65\163\x73\x5f\156\141\x6d\145"]; $row["\155\145\x72\147\x69\156\x67\x5f\x70\162\x6f\x63\145\x73\x73\x5f\x6e\141\155\x65"] = $merging_process_name; C1H5Q: $history_data = json_decode(trim($row["\x64\x65\163\143\162\x69\x70\x74\x69\x6f\x6e"], "\42"), true); $date_merged_user_format = $timedate->asUser($timedate->fromDb($row["\x64\141\x74\x65\137\145\x6e\164\x65\162\145\x64"]), $current_user); $row["\x64\x75\160\154\x69\143\x61\164\x65\137\x6e\x61\x6d\145"] = $history_data["\156\141\155\x65"]; $row["\x64\x61\164\145\x5f\x6d\145\162\x67\x65\144"] = $date_merged_user_format; $merged_duplicates[] = $row; goto qv0IH; Kf3RV: return array("\x73\x75\x63\143\x65\163\x73" => true, "\x6d\145\162\x67\x65\144\x5f\x64\x75\160\x6c\151\x63\x61\x74\x65\x73" => $merged_duplicates); } public function previewMergedRecord($api, $args) { if (!empty($args["\155\x65\x72\x67\x65\137\x72\x65\143\157\x72\x64\137\x69\144"])) { goto HCGPd; } return array("\163\x75\143\143\145\163\163" => false, "\155\145\163\x73\x61\147\145" => translate("\114\102\x4c\x5f\x4d\105\122\107\x45\x5f\x52\105\103\x4f\x52\104\x5f\x49\104\137\115\111\x53\x53\x49\116\107", "\x45\x33\x38\x5f\115\x65\162\147\145\144\x44\165\x70\x6c\151\143\x61\x74\x65\163")); HCGPd: $merge_bean = BeanFactory::getBean("\x45\63\70\137\x4d\x65\162\x67\x65\x64\x44\165\x70\x6c\x69\x63\141\x74\145\163", $args["\155\x65\x72\x67\145\x5f\x72\x65\143\157\x72\144\x5f\151\144"]); if (!empty($merge_bean->id)) { goto UQiE5; } return array("\163\x75\143\143\x65\163\x73" => false, "\x6d\x65\x73\163\141\147\x65" => translate("\114\x42\114\137\x4d\x45\122\107\105\137\122\x45\103\117\x52\104\x5f\102\x45\x41\x4e\x5f\115\111\123\x53\111\116\x47", "\105\x33\x38\137\x4d\145\x72\147\145\x64\104\165\160\154\151\x63\x61\164\145\x73")); UQiE5: $duplicate_bean = BeanFactory::getBean($merge_bean->for_module, $merge_bean->merged_record_id, array(), false); if (!empty($duplicate_bean->id)) { goto Q9IPR; } $duplicate_bean_attributes = json_decode($merge_bean->description, true); goto m68Qq; Q9IPR: $duplicate_bean->deleted = 0; $duplicate_bean_attributes = $this->formatBean($api, $args, $duplicate_bean); $duplicate_bean_attributes["\x64\x65\154\x65\x74\x65\x64"] = 1; m68Qq: return array("\x73\165\x63\143\145\163\x73" => true, "\x64\165\x70\x6c\x69\143\x61\164\145\x5f\142\x65\x61\156\x5f\x61\x74\164\x72\x69\142\165\164\145\x73" => $duplicate_bean_attributes); } }
